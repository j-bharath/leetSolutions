/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> ans;
        bool if_insert = false;
        for (auto interval : intervals) {
            if (interval.end < newInterval.start)
                ans.push_back(interval);
            else if (interval.start > newInterval.end) {
                if (!if_insert) {
                    ans.push_back(newInterval);
                    if_insert = true;
                }
                ans.push_back(interval);
            }
            else {
                newInterval.start = min(newInterval.start, interval.start);
                newInterval.end = max(newInterval.end, interval.end);
            }
            
        }
        if (!if_insert) ans.push_back(newInterval);
        
        return ans;
    }
};