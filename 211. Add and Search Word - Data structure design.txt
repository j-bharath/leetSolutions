class TrieNode{
    public:
    bool isWord=false;
    TrieNode *children[26];
    TrieNode(){
        memset(children,NULL,sizeof(children));
    }
};

class WordDictionary {
public:
    WordDictionary(){
        root=new TrieNode();
    }
    // Adds a word into the data structure.
    void addWord(string word) {
        TrieNode *itr=root;
        for(int i=0;i<word.length();i++){
            if(!itr->children[word[i]-'a'])
                itr->children[word[i]-'a']=new TrieNode();
            itr=itr->children[word[i]-'a'];
        }
        itr->isWord=true;
    }

    bool search_rec(string& word, int pos, TrieNode* p) {
        if(!p) return false;
        if(pos >= word.size()) return p->isWord;
        
        if(word[pos] == '.') {
            for(int i = 0; i < 26; i++) {
                if(search_rec(word, pos+1, p->children[i]))
                    return true;
            }
            return false;
        } else {
            return search_rec(word, pos+1, p->children[word[pos] - 'a']);
        }
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    bool search(string word) {
        if(word.length()==0)
            return true;
        return search_rec(word, 0, root);
    }
private:
    TrieNode *root;
};

// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary;
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");