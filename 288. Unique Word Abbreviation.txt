class ValidWordAbbr {
private:
    string getAbbr(const string &str) {
        int n = str.size();
        if (n <= 2)
            return str;
        
        return str[0] + to_string(n-2) + str[n-1];
    }
    
    unordered_set<string> dict; // deduplicated dictionary
    unordered_map<string, int> abbrs; // map of abbr to its count
public:
    ValidWordAbbr(vector<string> &dictionary) {
        for (const string &str : dictionary)
            dict.insert(str);
            
        for (const string &str : dict)
            abbrs[getAbbr(str)] ++;
    }

    bool isUnique(string word) {
        if (dict.find(word) != dict.end()) // if word is one of the original dict words, its abbr count must be 1 (i.e. the original count)
            return abbrs[getAbbr(word)] == 1;
        else // if word is not one of the original dict words, no same abbr is allowed
            return abbrs[getAbbr(word)] == 0;
    }
};