class Solution {
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& wordList) {
        queue<string> q;
        wordList.insert(endWord);
        pushWords(beginWord,q,wordList);
        int length=2;
        while(!q.empty()){
            int num=q.size();
            for(int i=0;i<num;i++){
                string word=q.front();
                q.pop();
                if(word==endWord)
                    return length;
                pushWords(word,q,wordList);
            }
            length++;
        }
        return 0;
    }
    
    void pushWords(string word,queue<string> &q,unordered_set<string> &wordList){
        wordList.erase(word);
        char letter;
        for(int i=0;i<word.length();i++){
            letter=word[i];
            for(int j=0;j<26;j++){
                char temp='a'+j;
                word[i]=temp;
                if(wordList.find(word)!=wordList.end()){
                    q.push(word);
                    wordList.erase(word);
                }
            }
            word[i]=letter;
        }
    }
};