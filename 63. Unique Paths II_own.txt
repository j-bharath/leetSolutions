class Solution {
public:

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int row,col;
        row=obstacleGrid.size();
        col=obstacleGrid[0].size();
        if(row==0 || col==0)
            return 0;
        //when destination is 1
        if(obstacleGrid[row-1][col-1]==1 || obstacleGrid[0][0]==1)
            return 0;
        int path[row][col];
        path[row-1][col-1]=1;
        cout<<row<<" "<<col<<endl; 
        for(int i=row-1;i>=0;i--){
            for(int j=col-1;j>=0;j--){
                //cout<<i<<" before "<<j<<endl;
                if(obstacleGrid[i][j]==1){
                    path[i][j]==0;
                    continue;
                }else if(i+1<row && j+1<col){
                    path[i][j]=path[i][j+1]+path[i+1][j];
                }else if(i+1<row){
                    path[i][j]=path[i+1][j];
                }else if(j+1<col){
                    path[i][j]=path[i][j+1];
                }
                cout<<i<<" "<<j<<" "<<path[i][j]<<endl;
            }
        }
        return path[0][0];
    }
};