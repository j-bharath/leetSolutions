/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
        vector<vector<int>> verticalOrder(TreeNode* root) {
        vector<vector<int>> res;
        if (!root) return res;
        queue<pair<TreeNode*, int>> q;
        q.push(make_pair(root, 0));
        int offset = 0;
        while (!q.empty()) {
            pair<TreeNode*, int> p = q.front();
            TreeNode* node = p.first;
            int col = p.second;
            q.pop();
            int idx = col - offset;
            offset = min(offset, col);
            
            if (idx == res.size()) res.push_back(vector<int>(1, node->val));
            else if (idx < 0 ) res.insert(res.begin(), vector<int>(1, node->val));
            else res[idx].push_back(node->val);
            
            if (node->left) q.push(make_pair(node->left, col-1));
            if (node->right) q.push(make_pair(node->right, col+1));
        }
        return res;
    }

};